
/*
* SD card attached to SPI bus as follows:
** MOSI     - pin 11
** MISO     - pin 12
** CLK(SCK) - pin 13
** CS       - pin 10
*/
#include <SD.h>
#include <SPI.h>
#include <SoftwareSerial.h>
#define rxPin 8
#define txPin 9


SoftwareSerial bluetooth(rxPin, txPin); // RX, TX

String signal; 
int charCount;

void setup(){
 Serial.begin(9600); 
 bluetooth.begin(9600);
 Serial.print("Initializing SD card...");
 pinMode(10, OUTPUT);
 digitalWrite(10, HIGH);  
 if (!SD.begin(10)) {
   Serial.println("Card failed, or not present");
   return;
 }
 Serial.println("card initialized.");
overwriteFile("devices.txt", "0C:71:5D:41:88:6A2C:71:5D:41:88:6A");
overwriteFile("admin.txt", "admin#admin");
overwriteFile("productKey.txt", "");
overwriteFile("publicKey.txt", "");
overwriteFile("privateKey.txt", "");
}

void loop()
{
  while (bluetooth.available()){
    do{
    charCount = 0;
    char s;
      s = bluetooth.read();
      if(isDigit(s)){
      signal +=(char)s;
        charCount++;
      }
    }while(charCount!=1);
    Serial.println("= = = = = = = = = =");
    Serial.println("Receiving data . . .");
    Serial.print("Signal: "); //show the data
    Serial.println(signal); //show the data
    if (signal == "1"){
      setPrivateKey();
    }
    else if (signal == "2"){
      checkProdKey();
    }
    else if (signal == "3"){
      Serial.println("Verifying . . ");
      checkUserNamePassword();
    }
    else if(signal == "4"){
      Serial.println("Adding Device . . .");
      addDevice();
    }
    else if (signal == "6"){
      Serial.println("Checking MAC Address . . ");
      checkMacAdd();
    }
    else if (signal == "7"){
      Serial.println("Receiving Username and Password . . ");
      changeUserPass();
    }
    signal = "";
  }
}

void overwriteFile(String tempFileName, String dataToWrite){
  File myFile;
    delay(1000);
  char filename[tempFileName.length()+1];
  tempFileName.toCharArray(filename, sizeof(filename));
  SD.remove(filename);
  myFile = SD.open(filename, FILE_WRITE);
  myFile.print(dataToWrite);
  myFile.close();
}

String getDataFromFile(String tempFileName){
  File myFile;
  delay(1000);  
  char filename[tempFileName.length()+1];
  tempFileName.toCharArray(filename, sizeof(filename)); 
  String data;
  myFile = SD.open(filename);
  if (myFile) {
    while (myFile.available()) {
      data += char( myFile.read());  
    }
    myFile.close();
    delay(1000);
    return data;
  } else {
    Serial.println("error opening test.txt");
    delay(1000);
    
    return "";
  } 
}


void checkUserNamePassword(){
  delay(1000);  
  String androidUserPass;
  while(bluetooth.available()){
    androidUserPass += char(bluetooth.read());
  }  
  Serial.print("Received Android User and Pass: ");
  Serial.print(androidUserPass);
  androidUserPass.trim();
  
  if(androidUserPass == getDataFromFile("admin.txt")){
   Serial.println("OK"); 
   bluetooth.println("1");
   
  }
  else{
    Serial.println("Invalid");
    bluetooth.println("0");
  }
}
void setPrivateKey(){
  delay(1000);  
  resetValue();
  String strPrivateKey;
  char myChar;
  while(bluetooth.available()){
    myChar = bluetooth.read();
    if(isDigit(myChar)){
      strPrivateKey +=(char)myChar;
    }
  }
  //save privateKey
  overwriteFile("privateKey.txt", strPrivateKey);
  sendPublicKey(generatePublicKey());
  resetValue();
}

int generatePublicKey(){
  delay(1000);  
  int intPubKey = (int) random(1000, 9973); //9973 highest 4-digit prime
  overwriteFile("publicKey.txt", intPubKey+"");
  int intPrivKey = (getDataFromFile("privateKey.txt")).toInt();
  long intProdKey = (long) intPubKey * intPrivKey;
  overwriteFile("productKey.txt", intProdKey+"");
return intPubKey;
}

void sendPublicKey(int intPubKey){
  delay(1000);  
  bluetooth.println(intPubKey);
  Serial.println("Sending Public Key . . .");
}

void resetValue(){
  delay(1000);  
  overwriteFile("privateKey.txt","");
  overwriteFile("publicKey.txt","");
  
}

void checkProdKey(){
  delay(1000);
  String strAndroidKey;  
  char myChar;
  while(bluetooth.available()){
    myChar = bluetooth.read();
    if(isDigit(myChar)){
      strAndroidKey +=(char)myChar;
    }
  }
  Serial.println("Receiving Android Product Key . . .");

 if(strAndroidKey == getDataFromFile("productKey.txt")){
     Serial.println("Valid Android Product Key . . .");
     bluetooth.println("1");
     delay(3000);
 } else{
   bluetooth.println("0");
   Serial.println("Invalid Android Product Key . . .");
 }
 resetValue();
 overwriteFile("productKey.txt", "");
} 

void checkMacAdd(){
  delay(1000);  
  String devices = getDataFromFile("devices.txt");
  bluetooth.println(devices);
}

void addDevice(){
 delay(1000);
 String addressestoAdd;
 while (bluetooth.available()){
   addressestoAdd += char(bluetooth.read());
 }
 Serial.println(addressestoAdd);
 overwriteFile("devices.txt", addressestoAdd);
 Serial.println(getDataFromFile("devices.txt"));
 Serial.begin(9600);
 
}

void changeUserPass(){
 delay(1000); 
 String newusernamepass;
  while (bluetooth.available()){
    newusernamepass += char(bluetooth.read());
 }
 newusernamepass.trim();
 overwriteFile("admin.txt", newusernamepass);
 bluetooth.println("1");
 
}